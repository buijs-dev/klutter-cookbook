// Copyright (c) 2021 - 2023 Buijs Software
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

import 'package:squint_json/squint_json.dart';
import 'planet_dataclass.dart';
import 'planet_extensions.dart';
import 'pizza_dataclass.dart';
import 'pizza_extensions.dart';

/// Autogenerated data class by Squint.
@squint
class Person {
  const Person({
    required this.name,
    required this.age,
    required this.bornOnPlanet,
    required this.favoritePizzas,
    this.friends,
    this.isHuman,
  });

  @JsonValue("name")
  final String name;

  @JsonValue("age")
  final int age;

  @JsonEncode(using: encodePlanet)
  @JsonDecode<Planet, JsonString>(using: decodePlanet)
  @JsonValue("bornOnPlanet")
  final Planet bornOnPlanet;

  @JsonValue("favoritePizzas")
  final Map<Pizza, double> favoritePizzas;

  @JsonValue("friends")
  final List<Person>? friends;

  @JsonValue("isHuman")
  final bool? isHuman;
}

JsonString encodePlanet(Planet object) {
  switch (object) {
    case Planet.EARTH:
      return const JsonString(key: "bornOnPlanet", data: "EARTH");

    case Planet.MARS:
      return const JsonString(key: "bornOnPlanet", data: "MARS");

    case Planet.JUPITER:
      return const JsonString(key: "bornOnPlanet", data: "JUPITER");

    case Planet.EGO:
      return const JsonString(key: "bornOnPlanet", data: "EGO");

    default:
      return const JsonString(key: "bornOnPlanet", data: "");
  }
}

Planet decodePlanet(JsonString value) {
  switch (value.data) {
    case "EARTH":
      return Planet.EARTH;

    case "MARS":
      return Planet.MARS;

    case "JUPITER":
      return Planet.JUPITER;

    case "EGO":
      return Planet.EGO;

    default:
      return Planet.NONE;
  }
}
